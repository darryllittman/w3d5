c
attribute_vals
found_items
params
where_line
c
where_line
attribute_vals
params
found_items
c
table_name
c
found_items.first.name
found_items.first
c
found_items
c
table_name.capitalize[0..-2]
table_name.capitalize
table_name
c
found_items
SQLObject.new(found_items.first)
found_items.first.class
found_items.map { |item| SQLObject.new(item) }
found_items.map { |item| SQLObject.new(params) }
found_items
where_line
table_name
c
self
c
self.table_name
table_name
self.name
self.params
self
self.class
params
c
table_name
c
where_line
attribute_vals
params
c
attribute_vals
table_name
params
c
where_line
c
params
c
cc
attribute_values
self.attribute_values
SQLObject.attribute_values
c
where_line
wehre_line
params
attribute_vals
where_line
c
SQLObject.columns
SQLObject.attribute_values
self.attribute_values
attribute_values
self.columns
self.class.columns.map { |col| self.send(col) }
attribute_vals
attribute_values
params
attribute_vals
c
table_name
self
self.class
c
<<<<<<< HEAD
att_values
c
attribute_values << attribute_values.first
attribute_values
att_values
c
attribute_values.first
attribute_values
attributes
set_line
c
attribute_values
c
set_line
c
=======
>>>>>>> abf7e64d762e2eeb5052193d466fb832e36e3903
col_names
attribute_values
question_marks
col_names
c
(["?"] * self.class.columns.size).join(",")c
(["?"] * self.class.columns.size).join(",")
n
question_marks
col_names
c
col_names
columns
c
(["?"] * self.class.columns.size).join(",")
n
col_names
exit
c
s
results
n
id
el
c
display el
c
display id
display el
c
display el
c
display id
c
display el
c
display id
exit
c
id
el
c
row.last.class
row.last
row
c
results
c
p results
p debugger
c
class_name
c
SQLObject.new(params)
params
c
all
n
c
s
self.columns
c
self.class.columns.include?(k.to_s)
col
self.class.columns.include?(k)
k
n
k
self.class.columns.include?(k)
self.class.columns
c
exit
self.class.columns
c
n
c
self.class.columns
self.columns
columns
c
attributes.keys.include?(col)
attributes.keys.include?(k)
attributes.keys
col
k
n
k
exit
c
attributes.keys.include?(k)
k
attributes.include?(k
attributes
self.columns
col
params.keys
params
k = col.to_sym
col.to_sym
exit
c
exit
c
self.columns
self.colums
columns
attributes
exit
c
s
c
@attributes[col] = 5
@attributes[col]
@attributes
self.attributes
attributes
col
c
@columns
self.columns
c
columns
self.columns
c
s
c
self.colums
@cols
c
self.instance_variable_get("#{name}".to_sym)
c
"@#{name}".to_sym
"@#{name}"
c
":#{name}"
"#{name}"
name
c
:@name
:@"#{name}"
self.instance_variable_get(:@x)
self.instance_variable_get(@x)
self.instance_variable_get(:x)
self.instance_variable_get(:@name)
name
